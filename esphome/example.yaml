substitutions:
  mhi_device_id: "mhi_ac_example"
  # Unique device ID in HA
  device_id: "ac_example"
  # Unique device name in HA (sensor names will be prefixed by this name)
  device_name: "AC Example"

esphome:
  name: ac-example
  platformio_options:
    board_build.flash_mode: dio

external_components:
  - source: components

esp32:
  board: esp32-c3-devkitm-1
  framework: 
    type: esp-idf

# Enable logging
logger:
  level: DEBUG

MhiAcCtrl:
  id: ${mhi_device_id}

climate:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    id: ${device_id}
    name: "${device_name}"

# awaiting https://github.com/esphome/feature-requests/issues/2066
#select:
  #- platform: custom
    #lambda: |-
      #return ((MhiAcCtrl*)id(${device_id}))->get_selects();
    #selects:
      #- name: ${device_name} Vanes

sensor:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    fan_raw:
      name: ${device_name} fan raw
    fan_old:
      name: ${device_name} fan old
    total_energy:
      name: ${device_name} Energy
    power:
      name: ${device_name} Power
    frame_errors:
      name: ${device_name} Frame errors

  - platform: homeassistant
    name: "Voltage"
    entity_id: sensor.voltage_l3
    on_value:
      then:
        - lambda: 'mhi_energy.set_voltage(x);'

switch:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    active_mode:
      name: ${device_name} Active mode
      id: ${device_id}_active_mode


# Stop communications to AC when we're offline
# Stuff like on timer on the IR remote will work when we are in passive mode
# #TODO: test / increase interval
#interval:
  #- interval: 1s
    #then:
      #if:
        #condition:
          #api.connected:
        #then:
          #- switch.turn_on: ${device_id}_active_mode
        #else:
          #- switch.turn_off: ${device_id}_active_mode


status_led:
  pin: 
    #white led, off when all good
    number: 19

