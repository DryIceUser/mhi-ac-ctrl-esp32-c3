substitutions:
  mhi_device_id: "mhi_ac_example"
  # Unique device ID in HA
  device_id: "ac_example"
  # Unique device name in HA (sensor names will be prefixed by this name)
  device_name: "AC Example"

esphome:
  name: ac-example
  platformio_options:
    board_build.flash_mode: dio

external_components:
  - source: components

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Optionally enable logging
logger:
  level: INFO

MhiAcCtrl:
  id: ${mhi_device_id}
  # Optional config
  # The default values are:
  use_long_frame: true
  mosi_pin: GPIO7
  miso_pin: GPIO2
  sclk_pin: GPIO6
  cs_in_pin: GPIO10
  cs_out_pin: GPIO9

climate:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    id: ${device_id}
    name: "${device_name}"

select:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    vanes_ud:
      name: ${device_name} Vanes Up Down
      id: ${device_id}_vanes_ud
    # The 3D auto setting and vanes_lr only work when use_long_frame is set to
    # true
    vanes_lr:
      name: ${device_name} Vanes Left Right
      id: ${device_id}_vanes_lr

sensor:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    # Counts SPI frames that did not look right. Usually a few at boot or when
    # switching active mode
    frame_errors:
      name: ${device_name} Frame errors

    # Special sensor to filter out bursts of (small) temperature changes. When
    # this sensor is present, the current temperature in the climate component
    # will use the filtered value from this sensor.
    #
    # Use case: filtering out temperature jitter. See
    # https://github.com/hberntsen/mhi-ac-ctrl-esp32-c3/issues/5
    climate_current_temperature:
      # Only id, no name so it won't be sent to home assistant as separate sensor
      id: climate_current_temperature
      filters:
        # Check for temperature changes only every 10 seconds
        - heartbeat: 10s
        # Home assistant does not show decimals
        - round: 0
        # The climate component will only send updates if the value is different

    # Operation data based sensors
    #
    # These sensors provide some internal stats, not all interesting. Similarly
    # to the rest of the sensors: only keep the ones you'll actually look at.

    # Data is requested sensor by sensor (when present) from the AC, which
    # should always answer, but might not. The timeout sensor counts how many
    # requests were not answered. It is curerntly normal to have like 150 or so
    # per day.
    operation_data_timeouts:
      name: ${device_name} operation data timeouts

    # In steps of 14/51A
    current:
      name: ${device_name} current

    # Using the current from the operation data, multiplied by 230V, or the
    # value set using from, i.e. a home assistant voltage sensor. See later in
    # this file.
    power:
      name: ${device_name} power
    # Integrates the power sensor above into energy usage, as an alternative to
    # the internal sensor. Assumes 5W idle usage. The heavier the AC is used,
    # the less accurate it seems compared to an external power meter (like, the
    # actual usage can be a factor of 1.6 times higher). It can also be on-par
    # whith less heavy load.
    # Not sure yet which is more accurate.
    integrated_total_energy:
      name: ${device_name} energy
      filters:
        - throttle: 60s

    # The energy usage provided by the AC, in steps of 250Wh. It will not reset
    # regularly, but not exactly midnight. So you can better create a Utility
    # Meter helper in Home Assistant that does. Use this sensor as input and
    # choose a reset cycle. Net consumption, delta values switches off,
    # periodically resetting on.
    energy_used:
      name: ${device_name} energy used

    # The internal target temperature for the AC. This can be different from
    # the target temperature in the climate sensor:
    # * With eco mode
    # * + 2 degrees celcius when heating, unless the built in countermeasure
    #   for excessive temperature rise is used.
    set_temperature:
      name: ${device_name} set temperature
    return_air_temperature:
      name: ${device_name} return air temperature
    # More granular fan speed than we can see in the climate directly
    indoor_fan_speed:
      name: ${device_name} indoor fan speed

    # 100 hour granularity
    indoor_total_run_hours:
      name: ${device_name} indoor total run hours
    compressor_total_run_hours:
      name: ${device_name} compressor total run hours

    outdoor_air_temperature:
      name: ${device_name} outdoor air temperature
    discharge_pipe_temperature:
      name: ${device_name} discharge pipe temperature

    compressor_protection_state_number:
      name: ${device_name} compressor protection state number
    outdoor_fan_speed:
      name: ${device_name} outdoor fan speed
    outdoor_expansion_valve_pulse_rate:
      name: ${device_name} outdoor expansion valve pulse rate


    # Calculation marked as 'to be confirmed' in mhi-ac-ctrl
    compressor_frequency:
      name: ${device_name} compressor frequency

    # These two are marked as only a rough apprximation in mhi-ac-ctrl
    indoor_u_bend_temperature:
      name: ${device_name} indoor u-bend temperature
    indoor_suction_header_temperature:
      name: ${device_name} indoor suction header temperature

    # Formula for calculation not known for the following sensors:
    indoor_capillary_temperature:
      name: ${device_name} indoor capillary temperature
    outdoor_heat_exchanger_temperature_1:
      name: ${device_name} outdoor heat exchanger temperature 1
    compressor_discharge_pipe_super_heat_temperature:
      name: ${device_name} discharge pipe super heat temperature

binary_sensor:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    # Defrosting sensor via operation data
    defrosting:
      name: ${device_name} defrosting

#  # For setting the current voltage, so we can calculate the used power
#  - platform: homeassistant
#    name: "Voltage"
#    entity_id: sensor.voltage_l3
#    filters:
#      - filter_out: nan
#    on_value:
#      then:
#        - lambda: 'mhi_ac::energy.set_voltage(x);'

switch:
  - platform: MhiAcCtrl
    mhi_ac_ctrl_id: ${mhi_device_id}
    active_mode:
      name: ${device_name} Active mode
      id: ${device_id}_active_mode

status_led:
  pin:
    #white led, off when all good
    number: 19

